(()=>{"use strict";class t{constructor(t){this.data=t,this.left=null,this.right=null}}const n=(t,l="",s=!0)=>{null!==t&&(null!==t.right&&n(t.right,`${l}${s?"│   ":"    "}`,!1),console.log(`${l}${s?"└── ":"┌── "}${t.data}`),null!==t.left&&n(t.left,`${l}${s?"    ":"│   "}`,!0))},l=function t(n){if(n.length<=1)return n;{const l=Math.floor(n.length/2),s=n.slice(0,l),o=n.slice(l);return function(t,n){const l=[];for(;t.length>0&&n.length>0;)if(t[0]<n[0]){const n=t.shift();l.push(n)}else if(t[0]>n[0]){const t=n.shift();l.push(t)}else if(t[0]==n[0]){const s=t.shift();n.shift(),l.push(s)}return l.concat(t,n)}(t(s),t(o))}}([1,2,3,4,5,6,7,8]);console.log(l);const s=function n(l,s,o){if(s>o)return null;const e=Math.floor((s+o)/2),c=new t(l[e]);return c.left=n(l,s,e-1),c.right=n(l,e+1,o),c}(l,0,l.length-1);console.log(s),n(s)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsIm1hcHBpbmdzIjoibUJBRUEsTUFBTUEsRUFDRixXQUFBQyxDQUFZQyxHQUNSQyxLQUFLRCxLQUFPQSxFQUNaQyxLQUFLQyxLQUFPLEtBQ1pELEtBQUtFLE1BQVEsSUFDakIsRUF1QkosTUFBTUMsRUFBYyxDQUFDQyxFQUFNQyxFQUFTLEdBQUlDLEdBQVMsS0FDaEMsT0FBVEYsSUFHZSxPQUFmQSxFQUFLRixPQUNQQyxFQUFZQyxFQUFLRixNQUFPLEdBQUdHLElBQVNDLEVBQVMsT0FBUyxVQUFVLEdBRWxFQyxRQUFRQyxJQUFJLEdBQUdILElBQVNDLEVBQVMsT0FBUyxTQUFTRixFQUFLTCxRQUN0QyxPQUFkSyxFQUFLSCxNQUNQRSxFQUFZQyxFQUFLSCxLQUFNLEdBQUdJLElBQVNDLEVBQVMsT0FBUyxVQUFVLEdBQ2pFLEVBS0VHLEVDN0NOLFNBQVNDLEVBQVVDLEdBQ2YsR0FBSUEsRUFBTUMsUUFBVSxFQUNoQixPQUFPRCxFQUNKLENBQ0gsTUFBTUUsRUFBV0MsS0FBS0MsTUFBTUosRUFBTUMsT0FBUyxHQUNyQ0ksRUFBWUwsRUFBTU0sTUFBTSxFQUFHSixHQUMzQkssRUFBYVAsRUFBTU0sTUFBTUosR0FLL0IsT0FHUixTQUFlRyxFQUFXRSxHQUNsQixNQUFNVCxFQUFjLEdBRXBCLEtBQU9PLEVBQVVKLE9BQVMsR0FBS00sRUFBV04sT0FBUyxHQUMvQyxHQUFJSSxFQUFVLEdBQUtFLEVBQVcsR0FBSSxDQUM5QixNQUFNQyxFQUFjSCxFQUFVSSxRQUM5QlgsRUFBWVksS0FBS0YsRUFDckIsTUFBTyxHQUFJSCxFQUFVLEdBQUtFLEVBQVcsR0FBSSxDQUNyQyxNQUFNQyxFQUFjRCxFQUFXRSxRQUMvQlgsRUFBWVksS0FBS0YsRUFDckIsTUFBTyxHQUFJSCxFQUFVLElBQU1FLEVBQVcsR0FBSSxDQUN0QyxNQUFNSSxFQUFZTixFQUFVSSxRQUM1QkYsRUFBV0UsUUFDWFgsRUFBWVksS0FBS0MsRUFDckIsQ0FHSixPQUFPYixFQUFZYyxPQUFPUCxFQUFXRSxFQUN6QyxDQXJCV00sQ0FIaUJkLEVBQVVNLEdBQ1ROLEVBQVVRLEdBR3ZDLENBQUMsQ0RpQ2VSLENBREosQ0FBQyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLElBRXRDSCxRQUFRQyxJQUFJQyxHQUNaLE1BQU1nQixFQS9CTixTQUFTQyxFQUFVQyxFQUFLQyxFQUFPQyxHQUMzQixHQUFJRCxFQUFRQyxFQUNSLE9BQU8sS0FHWCxNQUFNaEIsRUFBV0MsS0FBS0MsT0FBT2EsRUFBUUMsR0FBTyxHQUN0Q0MsRUFBTyxJQUFJakMsRUFBSzhCLEVBQUlkLElBSzFCLE9BSEFpQixFQUFLN0IsS0FBT3lCLEVBQVVDLEVBQUtDLEVBQU9mLEVBQVcsR0FDN0NpQixFQUFLNUIsTUFBUXdCLEVBQVVDLEVBQUtkLEVBQVcsRUFBR2dCLEdBRW5DQyxDQUNYLENBbUJlSixDQUFVakIsRUFBYSxFQUFHQSxFQUFZRyxPQUFPLEdBQzVETCxRQUFRQyxJQUFJaUIsR0FJWnRCLEVBQVlzQixFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmluYXJ5LXNlYXJjaC10cmVlLy4vc3JjL2luZGV4LmpzIiwid2VicGFjazovL2JpbmFyeS1zZWFyY2gtdHJlZS8uL3NyYy9tZXJnZS1zb3J0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG1lcmdlU29ydCwgbWVyZ2UgfSBmcm9tIFwiLi9tZXJnZS1zb3J0XCI7XG5cbmNsYXNzIE5vZGUge1xuICAgIGNvbnN0cnVjdG9yKGRhdGEpIHtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICAgICAgdGhpcy5sZWZ0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5yaWdodCA9IG51bGw7XG4gICAgfVxufVxuXG5jbGFzcyBUcmVlIHtcbiAgICBjb25zdHJ1Y3RvcihhcnJheSkge1xuICAgICAgICB0aGlzLnJvb3QgPSBidWlsZFRyZWUoYXJyYXksIDAsIGFycmF5Lmxlbmd0aCAtIDEpOyAvLyA/XG4gICAgfVxufVxuXG5mdW5jdGlvbiBidWlsZFRyZWUoYXJyLCBzdGFydCwgZW5kKSB7XG4gICAgaWYgKHN0YXJ0ID4gZW5kKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0IG1pZHBvaW50ID0gTWF0aC5mbG9vcigoc3RhcnQgKyBlbmQpIC8gMik7XG4gICAgY29uc3Qgcm9vdCA9IG5ldyBOb2RlKGFyclttaWRwb2ludF0pO1xuXG4gICAgcm9vdC5sZWZ0ID0gYnVpbGRUcmVlKGFyciwgc3RhcnQsIG1pZHBvaW50IC0gMSk7XG4gICAgcm9vdC5yaWdodCA9IGJ1aWxkVHJlZShhcnIsIG1pZHBvaW50ICsgMSwgZW5kKTtcblxuICAgIHJldHVybiByb290O1xufVxuXG5jb25zdCBwcmV0dHlQcmludCA9IChub2RlLCBwcmVmaXggPSBcIlwiLCBpc0xlZnQgPSB0cnVlKSA9PiB7XG4gICAgaWYgKG5vZGUgPT09IG51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKG5vZGUucmlnaHQgIT09IG51bGwpIHtcbiAgICAgIHByZXR0eVByaW50KG5vZGUucmlnaHQsIGAke3ByZWZpeH0ke2lzTGVmdCA/IFwi4pSCICAgXCIgOiBcIiAgICBcIn1gLCBmYWxzZSk7XG4gICAgfVxuICAgIGNvbnNvbGUubG9nKGAke3ByZWZpeH0ke2lzTGVmdCA/IFwi4pSU4pSA4pSAIFwiIDogXCLilIzilIDilIAgXCJ9JHtub2RlLmRhdGF9YCk7XG4gICAgaWYgKG5vZGUubGVmdCAhPT0gbnVsbCkge1xuICAgICAgcHJldHR5UHJpbnQobm9kZS5sZWZ0LCBgJHtwcmVmaXh9JHtpc0xlZnQgPyBcIiAgICBcIiA6IFwi4pSCICAgXCJ9YCwgdHJ1ZSk7XG4gICAgfVxufTtcblxuY29uc3Qgb2RpbkFycmF5ID0gWzEsIDcsIDQsIDIzLCA4LCA5LCA0LCAzLCA1LCA3LCA5LCA2NywgNjM0NSwgMzI0XTtcbmNvbnN0IG15QXJyYXkgPSBbMSwgMiwgMywgNCwgNSwgNiwgNywgOF07XG5jb25zdCBzb3J0ZWRBcnJheSA9IG1lcmdlU29ydChteUFycmF5KTtcbmNvbnNvbGUubG9nKHNvcnRlZEFycmF5KTtcbmNvbnN0IG15VHJlZSA9IGJ1aWxkVHJlZShzb3J0ZWRBcnJheSwgMCwgc29ydGVkQXJyYXkubGVuZ3RoLTEpO1xuY29uc29sZS5sb2cobXlUcmVlKTtcblxuXG5cbnByZXR0eVByaW50KG15VHJlZSk7IiwiZnVuY3Rpb24gbWVyZ2VTb3J0KGFycmF5KSB7XG4gICAgaWYgKGFycmF5Lmxlbmd0aCA8PSAxKSB7XG4gICAgICAgIHJldHVybiBhcnJheTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBtaWRwb2ludCA9IE1hdGguZmxvb3IoYXJyYXkubGVuZ3RoIC8gMik7XG4gICAgICAgIGNvbnN0IGZpcnN0SGFsZiA9IGFycmF5LnNsaWNlKDAsIG1pZHBvaW50KTtcbiAgICAgICAgY29uc3Qgc2Vjb25kSGFsZiA9IGFycmF5LnNsaWNlKG1pZHBvaW50KTtcblxuICAgICAgICBjb25zdCBzb3J0ZWRGaXJzdEhhbGYgPSBtZXJnZVNvcnQoZmlyc3RIYWxmKTtcbiAgICAgICAgY29uc3Qgc29ydGVkU2Vjb25kSGFsZiA9IG1lcmdlU29ydChzZWNvbmRIYWxmKTtcblxuICAgICAgICByZXR1cm4gbWVyZ2Uoc29ydGVkRmlyc3RIYWxmLCBzb3J0ZWRTZWNvbmRIYWxmKTtcbiAgICB9fVxuXG5mdW5jdGlvbiBtZXJnZShmaXJzdEhhbGYsIHNlY29uZEhhbGYpIHtcbiAgICAgICAgY29uc3Qgc29ydGVkQXJyYXkgPSBbXTtcblxuICAgICAgICB3aGlsZSAoZmlyc3RIYWxmLmxlbmd0aCA+IDAgJiYgc2Vjb25kSGFsZi5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBpZiAoZmlyc3RIYWxmWzBdIDwgc2Vjb25kSGFsZlswXSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNtYWxsZXJJdGVtID0gZmlyc3RIYWxmLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgc29ydGVkQXJyYXkucHVzaChzbWFsbGVySXRlbSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGZpcnN0SGFsZlswXSA+IHNlY29uZEhhbGZbMF0pIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzbWFsbGVySXRlbSA9IHNlY29uZEhhbGYuc2hpZnQoKTtcbiAgICAgICAgICAgICAgICBzb3J0ZWRBcnJheS5wdXNoKHNtYWxsZXJJdGVtKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZmlyc3RIYWxmWzBdID09IHNlY29uZEhhbGZbMF0pIHtcbiAgICAgICAgICAgICAgICBjb25zdCBmaXJzdEl0ZW0gPSBmaXJzdEhhbGYuc2hpZnQoKTtcbiAgICAgICAgICAgICAgICBzZWNvbmRIYWxmLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgc29ydGVkQXJyYXkucHVzaChmaXJzdEl0ZW0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHNvcnRlZEFycmF5LmNvbmNhdChmaXJzdEhhbGYsIHNlY29uZEhhbGYpO1xuICAgIH1cblxuZXhwb3J0IHsgbWVyZ2VTb3J0LCBtZXJnZSB9OyJdLCJuYW1lcyI6WyJOb2RlIiwiY29uc3RydWN0b3IiLCJkYXRhIiwidGhpcyIsImxlZnQiLCJyaWdodCIsInByZXR0eVByaW50Iiwibm9kZSIsInByZWZpeCIsImlzTGVmdCIsImNvbnNvbGUiLCJsb2ciLCJzb3J0ZWRBcnJheSIsIm1lcmdlU29ydCIsImFycmF5IiwibGVuZ3RoIiwibWlkcG9pbnQiLCJNYXRoIiwiZmxvb3IiLCJmaXJzdEhhbGYiLCJzbGljZSIsInNlY29uZEhhbGYiLCJzbWFsbGVySXRlbSIsInNoaWZ0IiwicHVzaCIsImZpcnN0SXRlbSIsImNvbmNhdCIsIm1lcmdlIiwibXlUcmVlIiwiYnVpbGRUcmVlIiwiYXJyIiwic3RhcnQiLCJlbmQiLCJyb290Il0sInNvdXJjZVJvb3QiOiIifQ==