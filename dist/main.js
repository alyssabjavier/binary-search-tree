(()=>{"use strict";const t=(n,l="",s=!0)=>{null!==n&&(null!==n.right&&t(n.right,`${l}${s?"│   ":"    "}`,!1),console.log(`${l}${s?"└── ":"┌── "}${n.data}`),null!==n.left&&t(n.left,`${l}${s?"    ":"│   "}`,!0))};class n{constructor(t){this.data=t,this.left=null,this.right=null}}const l=function t(n){if(n.length<=1)return n;{const l=Math.floor(n.length/2),s=n.slice(0,l),o=n.slice(l);return function(t,n){const l=[];for(;t.length>0&&n.length>0;)if(t[0]<n[0]){const n=t.shift();l.push(n)}else if(t[0]>n[0]){const t=n.shift();l.push(t)}else if(t[0]==n[0]){const s=t.shift();n.shift(),l.push(s)}return l.concat(t,n)}(t(s),t(o))}}([1,2,3,4,5,6,7,8]);console.log(l);const s=function t(l,s,o){if(s>o)return null;const e=Math.floor((s+o)/2),c=new n(l[e]);return c.left=t(l,s,e-1),c.right=t(l,e+1,o),c}(l,0,l.length-1);console.log(s),t(s)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsIm1hcHBpbmdzIjoibUJBQUEsTUFBTUEsRUFBYyxDQUFDQyxFQUFNQyxFQUFTLEdBQUlDLEdBQVMsS0FDaEMsT0FBVEYsSUFHZSxPQUFmQSxFQUFLRyxPQUNQSixFQUFZQyxFQUFLRyxNQUFPLEdBQUdGLElBQVNDLEVBQVMsT0FBUyxVQUFVLEdBRWxFRSxRQUFRQyxJQUFJLEdBQUdKLElBQVNDLEVBQVMsT0FBUyxTQUFTRixFQUFLTSxRQUN0QyxPQUFkTixFQUFLTyxNQUNQUixFQUFZQyxFQUFLTyxLQUFNLEdBQUdOLElBQVNDLEVBQVMsT0FBUyxVQUFVLEdBQ2pFLEVDUEosTUFBTU0sRUFDRixXQUFBQyxDQUFZSCxHQUNSSSxLQUFLSixLQUFPQSxFQUNaSSxLQUFLSCxLQUFPLEtBQ1pHLEtBQUtQLE1BQVEsSUFDakIsRUF1QkosTUFFTVEsRUNqQ04sU0FBU0MsRUFBVUMsR0FDZixHQUFJQSxFQUFNQyxRQUFVLEVBQ2hCLE9BQU9ELEVBQ0osQ0FDSCxNQUFNRSxFQUFXQyxLQUFLQyxNQUFNSixFQUFNQyxPQUFTLEdBQ3JDSSxFQUFZTCxFQUFNTSxNQUFNLEVBQUdKLEdBQzNCSyxFQUFhUCxFQUFNTSxNQUFNSixHQUsvQixPQUdSLFNBQWVHLEVBQVdFLEdBQ2xCLE1BQU1ULEVBQWMsR0FFcEIsS0FBT08sRUFBVUosT0FBUyxHQUFLTSxFQUFXTixPQUFTLEdBQy9DLEdBQUlJLEVBQVUsR0FBS0UsRUFBVyxHQUFJLENBQzlCLE1BQU1DLEVBQWNILEVBQVVJLFFBQzlCWCxFQUFZWSxLQUFLRixFQUNyQixNQUFPLEdBQUlILEVBQVUsR0FBS0UsRUFBVyxHQUFJLENBQ3JDLE1BQU1DLEVBQWNELEVBQVdFLFFBQy9CWCxFQUFZWSxLQUFLRixFQUNyQixNQUFPLEdBQUlILEVBQVUsSUFBTUUsRUFBVyxHQUFJLENBQ3RDLE1BQU1JLEVBQVlOLEVBQVVJLFFBQzVCRixFQUFXRSxRQUNYWCxFQUFZWSxLQUFLQyxFQUNyQixDQUdKLE9BQU9iLEVBQVljLE9BQU9QLEVBQVdFLEVBQ3pDLENBckJXTSxDQUhpQmQsRUFBVU0sR0FDVE4sRUFBVVEsR0FHdkMsQ0FBQyxDRHFCZVIsQ0FESixDQUFDLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsSUFFdENSLFFBQVFDLElBQUlNLEdBQ1osTUFBTWdCLEVBbEJOLFNBQVNDLEVBQVVDLEVBQUtDLEVBQU9DLEdBQzNCLEdBQUlELEVBQVFDLEVBQ1IsT0FBTyxLQUdYLE1BQU1oQixFQUFXQyxLQUFLQyxPQUFPYSxFQUFRQyxHQUFPLEdBQ3RDQyxFQUFPLElBQUl4QixFQUFLcUIsRUFBSWQsSUFLMUIsT0FIQWlCLEVBQUt6QixLQUFPcUIsRUFBVUMsRUFBS0MsRUFBT2YsRUFBVyxHQUM3Q2lCLEVBQUs3QixNQUFReUIsRUFBVUMsRUFBS2QsRUFBVyxFQUFHZ0IsR0FFbkNDLENBQ1gsQ0FNZUosQ0FBVWpCLEVBQWEsRUFBR0EsRUFBWUcsT0FBTyxHQUM1RFYsUUFBUUMsSUFBSXNCLEdBQ1o1QixFQUFZNEIsRSIsInNvdXJjZXMiOlsid2VicGFjazovL2JpbmFyeS1zZWFyY2gtdHJlZS8uL3NyYy9wcmV0dHktcHJpbnQuanMiLCJ3ZWJwYWNrOi8vYmluYXJ5LXNlYXJjaC10cmVlLy4vc3JjL2luZGV4LmpzIiwid2VicGFjazovL2JpbmFyeS1zZWFyY2gtdHJlZS8uL3NyYy9tZXJnZS1zb3J0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHByZXR0eVByaW50ID0gKG5vZGUsIHByZWZpeCA9IFwiXCIsIGlzTGVmdCA9IHRydWUpID0+IHtcbiAgICBpZiAobm9kZSA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAobm9kZS5yaWdodCAhPT0gbnVsbCkge1xuICAgICAgcHJldHR5UHJpbnQobm9kZS5yaWdodCwgYCR7cHJlZml4fSR7aXNMZWZ0ID8gXCLilIIgICBcIiA6IFwiICAgIFwifWAsIGZhbHNlKTtcbiAgICB9XG4gICAgY29uc29sZS5sb2coYCR7cHJlZml4fSR7aXNMZWZ0ID8gXCLilJTilIDilIAgXCIgOiBcIuKUjOKUgOKUgCBcIn0ke25vZGUuZGF0YX1gKTtcbiAgICBpZiAobm9kZS5sZWZ0ICE9PSBudWxsKSB7XG4gICAgICBwcmV0dHlQcmludChub2RlLmxlZnQsIGAke3ByZWZpeH0ke2lzTGVmdCA/IFwiICAgIFwiIDogXCLilIIgICBcIn1gLCB0cnVlKTtcbiAgICB9XG59O1xuXG5leHBvcnQgeyBwcmV0dHlQcmludCB9IiwiaW1wb3J0IHsgbWVyZ2VTb3J0LCBtZXJnZSB9IGZyb20gXCIuL21lcmdlLXNvcnRcIjtcbmltcG9ydCB7IHByZXR0eVByaW50IH0gZnJvbSBcIi4vcHJldHR5LXByaW50XCI7XG5cbmNsYXNzIE5vZGUge1xuICAgIGNvbnN0cnVjdG9yKGRhdGEpIHtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICAgICAgdGhpcy5sZWZ0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5yaWdodCA9IG51bGw7XG4gICAgfVxufVxuXG5jbGFzcyBUcmVlIHtcbiAgICBjb25zdHJ1Y3RvcihhcnJheSkge1xuICAgICAgICB0aGlzLnJvb3QgPSBidWlsZFRyZWUoYXJyYXksIDAsIGFycmF5Lmxlbmd0aCAtIDEpOyAvLyA/XG4gICAgfVxufVxuXG5mdW5jdGlvbiBidWlsZFRyZWUoYXJyLCBzdGFydCwgZW5kKSB7XG4gICAgaWYgKHN0YXJ0ID4gZW5kKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0IG1pZHBvaW50ID0gTWF0aC5mbG9vcigoc3RhcnQgKyBlbmQpIC8gMik7XG4gICAgY29uc3Qgcm9vdCA9IG5ldyBOb2RlKGFyclttaWRwb2ludF0pO1xuXG4gICAgcm9vdC5sZWZ0ID0gYnVpbGRUcmVlKGFyciwgc3RhcnQsIG1pZHBvaW50IC0gMSk7XG4gICAgcm9vdC5yaWdodCA9IGJ1aWxkVHJlZShhcnIsIG1pZHBvaW50ICsgMSwgZW5kKTtcblxuICAgIHJldHVybiByb290O1xufVxuXG5jb25zdCBvZGluQXJyYXkgPSBbMSwgNywgNCwgMjMsIDgsIDksIDQsIDMsIDUsIDcsIDksIDY3LCA2MzQ1LCAzMjRdO1xuY29uc3QgbXlBcnJheSA9IFsxLCAyLCAzLCA0LCA1LCA2LCA3LCA4XTtcbmNvbnN0IHNvcnRlZEFycmF5ID0gbWVyZ2VTb3J0KG15QXJyYXkpO1xuY29uc29sZS5sb2coc29ydGVkQXJyYXkpO1xuY29uc3QgbXlUcmVlID0gYnVpbGRUcmVlKHNvcnRlZEFycmF5LCAwLCBzb3J0ZWRBcnJheS5sZW5ndGgtMSk7XG5jb25zb2xlLmxvZyhteVRyZWUpO1xucHJldHR5UHJpbnQobXlUcmVlKTsiLCJmdW5jdGlvbiBtZXJnZVNvcnQoYXJyYXkpIHtcbiAgICBpZiAoYXJyYXkubGVuZ3RoIDw9IDEpIHtcbiAgICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IG1pZHBvaW50ID0gTWF0aC5mbG9vcihhcnJheS5sZW5ndGggLyAyKTtcbiAgICAgICAgY29uc3QgZmlyc3RIYWxmID0gYXJyYXkuc2xpY2UoMCwgbWlkcG9pbnQpO1xuICAgICAgICBjb25zdCBzZWNvbmRIYWxmID0gYXJyYXkuc2xpY2UobWlkcG9pbnQpO1xuXG4gICAgICAgIGNvbnN0IHNvcnRlZEZpcnN0SGFsZiA9IG1lcmdlU29ydChmaXJzdEhhbGYpO1xuICAgICAgICBjb25zdCBzb3J0ZWRTZWNvbmRIYWxmID0gbWVyZ2VTb3J0KHNlY29uZEhhbGYpO1xuXG4gICAgICAgIHJldHVybiBtZXJnZShzb3J0ZWRGaXJzdEhhbGYsIHNvcnRlZFNlY29uZEhhbGYpO1xuICAgIH19XG5cbmZ1bmN0aW9uIG1lcmdlKGZpcnN0SGFsZiwgc2Vjb25kSGFsZikge1xuICAgICAgICBjb25zdCBzb3J0ZWRBcnJheSA9IFtdO1xuXG4gICAgICAgIHdoaWxlIChmaXJzdEhhbGYubGVuZ3RoID4gMCAmJiBzZWNvbmRIYWxmLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGlmIChmaXJzdEhhbGZbMF0gPCBzZWNvbmRIYWxmWzBdKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc21hbGxlckl0ZW0gPSBmaXJzdEhhbGYuc2hpZnQoKTtcbiAgICAgICAgICAgICAgICBzb3J0ZWRBcnJheS5wdXNoKHNtYWxsZXJJdGVtKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZmlyc3RIYWxmWzBdID4gc2Vjb25kSGFsZlswXSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNtYWxsZXJJdGVtID0gc2Vjb25kSGFsZi5zaGlmdCgpO1xuICAgICAgICAgICAgICAgIHNvcnRlZEFycmF5LnB1c2goc21hbGxlckl0ZW0pO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChmaXJzdEhhbGZbMF0gPT0gc2Vjb25kSGFsZlswXSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGZpcnN0SXRlbSA9IGZpcnN0SGFsZi5zaGlmdCgpO1xuICAgICAgICAgICAgICAgIHNlY29uZEhhbGYuc2hpZnQoKTtcbiAgICAgICAgICAgICAgICBzb3J0ZWRBcnJheS5wdXNoKGZpcnN0SXRlbSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc29ydGVkQXJyYXkuY29uY2F0KGZpcnN0SGFsZiwgc2Vjb25kSGFsZik7XG4gICAgfVxuXG5leHBvcnQgeyBtZXJnZVNvcnQsIG1lcmdlIH07Il0sIm5hbWVzIjpbInByZXR0eVByaW50Iiwibm9kZSIsInByZWZpeCIsImlzTGVmdCIsInJpZ2h0IiwiY29uc29sZSIsImxvZyIsImRhdGEiLCJsZWZ0IiwiTm9kZSIsImNvbnN0cnVjdG9yIiwidGhpcyIsInNvcnRlZEFycmF5IiwibWVyZ2VTb3J0IiwiYXJyYXkiLCJsZW5ndGgiLCJtaWRwb2ludCIsIk1hdGgiLCJmbG9vciIsImZpcnN0SGFsZiIsInNsaWNlIiwic2Vjb25kSGFsZiIsInNtYWxsZXJJdGVtIiwic2hpZnQiLCJwdXNoIiwiZmlyc3RJdGVtIiwiY29uY2F0IiwibWVyZ2UiLCJteVRyZWUiLCJidWlsZFRyZWUiLCJhcnIiLCJzdGFydCIsImVuZCIsInJvb3QiXSwic291cmNlUm9vdCI6IiJ9