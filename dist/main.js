(()=>{"use strict";const t=(l,n="",r=!0)=>{null!==l&&(null!==l.right&&t(l.right,`${n}${r?"│   ":"    "}`,!1),console.log(`${n}${r?"└── ":"┌── "}${l.data}`),null!==l.left&&t(l.left,`${n}${r?"    ":"│   "}`,!0))};class l{constructor(t){this.data=t,this.left=null,this.right=null}}const n=function t(l){if(l.length<=1)return l;{const n=Math.floor(l.length/2),r=l.slice(0,n),e=l.slice(n);return function(t,l){const n=[];for(;t.length>0&&l.length>0;)if(t[0]<l[0]){const l=t.shift();n.push(l)}else if(t[0]>l[0]){const t=l.shift();n.push(t)}else if(t[0]==l[0]){const r=t.shift();l.shift(),n.push(r)}return n.concat(t,l)}(t(r),t(e))}}([1,7,4,23,8,9,4,3,5,7,9,67,6345,324]),r=new class{constructor(t,l,n){this.root=this.buildTree(t,l,n)}buildTree(t,n,r){if(n>r)return null;const e=Math.floor((n+r)/2),o=new l(t[e]);return o.left=this.buildTree(t,n,e-1),o.right=this.buildTree(t,e+1,r),o}}(n,0,n.length-1);console.log(r),t(r.root),console.log(function(t,l){const n=[],r=[];for(n.push(t);n.length>0;){const t=n.shift();r.push(t.data),t.left&&n.push(t.left),t.right&&n.push(t.right)}return r}(r.root)),console.log(function(t,l){const n=[];return function t(l){null!=l&&(t(l.left),n.push(l.data),t(l.right))}(t),n}(r.root)),function(t,l){let n=function(t,l){let n=t;for(;n;){if(4==n.data)return n;if(0==n.data&&!n.left&&!n.right)return null;4<n.data?n=n.left:4>n.data&&(n=n.right)}}(t);if(!n)return null;if(n.left||n.right||(n.data=null),n.left&&!n.right&&(n.data=n.left.data,n.left=null),!n.left&&n.right&&(n.data=n.right.data,n.right=null),n.left&&n.right){let t=n.right;for(;t.left;)t=t.left;n.data=t.data,n.right=t.right,t.data=null}}(r.root),t(r.root)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,